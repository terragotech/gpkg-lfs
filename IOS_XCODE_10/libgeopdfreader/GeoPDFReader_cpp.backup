#include "GeoPDFReader.h"

//Generate MBTiles
/* Generate MBTiles
* This function converts the supplied GeoPDF file to MBTiles
* Step 1: Convert the GeoPDF to GeoTIFF with GDAL (integrated with PDFium)
* Step 2: Convert the Created GeoTIFF to MBTiles 
*/
int geopdf_gwarp2( int argc, char ** argv);
int GeoPDFReader::generateMBTiles(char *ptrScratchFolder,char *ptrFileName,char *ptrMBTileName,char *ptrGdalPath,char *ptrProgressID,char *ptrTMP, char *ptrutid)
{
	int bReductionRequired = 0;
	int nResult = GEOPDF_READER_SUCCESS;
	/****** PDFs of large Resolution has to converted into small */
	GDALAllRegister();
	GDALDatasetH hDataset = NULL;
	hDataset = GDALOpenEx( ptrFileName, 
			GDAL_OF_READONLY | GDAL_OF_RASTER | GDAL_OF_VERBOSE_ERROR, 
			NULL,NULL,NULL );
	if(hDataset != NULL)
	{
		int nXSize = GDALGetRasterXSize(hDataset);
		int nYSize = GDALGetRasterYSize(hDataset);
		if((nXSize > 2500) || (nYSize > 2500))
		{
			bReductionRequired = 1;
		}
		GDALClose(hDataset);
	}
	string inputRasterFile;
	if(bReductionRequired  == 1)
	{	
		char **argv1 = (char **)malloc(sizeof(char *) * 11);

		if(argv1 != NULL)
		{
			for(int i=0;i<11;i++) 
			{
				argv1[i] = (char *) malloc(sizeof(char) * 1024);
				if(argv1[i] == NULL)
				{
					nResult = GEOPDF_READER_WARP_MEM_ALLOC_FAILED;
					return nResult;
				}
			}
		}
		string strDumpFile;
		strDumpFile.clear();
		strDumpFile.append(ptrScratchFolder);
		strDumpFile.append("/");
		strDumpFile.append("good.tif");

		string tifFile;
		tifFile.clear();
		tifFile.append(ptrScratchFolder);
		tifFile.append("/wtif");
		tifFile.append("_");
		tifFile.append(ptrProgressID);
		tifFile.append(".tif");



		strcpy(argv1[0],"gwarp");
		strcpy(argv1[1],ptrFileName);
		strcpy(argv1[2],tifFile.c_str());
		setenv("GPDF_DUMPFILE",(char*)strDumpFile.c_str(),1);

		int nResult = geopdf_gwarp2( 3, argv1 );
		remove(tifFile.c_str());
		printf("Dump file = %s\n",strDumpFile.c_str());
		inputRasterFile.clear();
		inputRasterFile.append(strDumpFile.c_str());
		for(int i=0;i<11;i++) {
			if(argv1[i] != NULL)
			{
				free(argv1[i]);
			}
		}
		if(argv1 != NULL)
		{
			free(argv1);
		}

	}
	
	{
	/******** Step 1: GeoPDF to GeoTIFF conversion starts here ********/
	 
	
	
	//Now config GDAL for gdal-data files used for reprojection
	CPLSetConfigOption("GDAL_DATA",ptrGdalPath);

	char **argv = (char **)malloc(sizeof(char *) * 11);
	if(argv != NULL)
	{
		for(int i=0;i<11;i++) 
		{
			argv[i] = (char *) malloc(sizeof(char) * 1024);
			if(argv[i] == NULL)
			{
				nResult = GEOPDF_READER_WARP_MEM_ALLOC_FAILED;
				return nResult;
			}
		}
		//Generate string to create a call to warp	
		
		strcpy(argv[0],"gwarp");
		strcpy(argv[1],"-wm");
		strcpy(argv[2],"2");
		strcpy(argv[3],"-of");
		strcpy(argv[4],"GTiff");
		strcpy(argv[5],"-t_srs");
		strcpy(argv[6],"EPSG:3857");
		if(bReductionRequired  == 1)
		{
			strcpy(argv[7],(char*)inputRasterFile.c_str());

		}
		else
		{
			strcpy(argv[7],ptrFileName);
		}
		string tifFile;
		tifFile.clear();
		tifFile.append(ptrScratchFolder);
		tifFile.append("/wtif");
		tifFile.append("_");
		tifFile.append(ptrProgressID);
		tifFile.append(".tif");
		strcpy(argv[8],tifFile.c_str());
		printf("tifFile file name: [%s]\n", tifFile.c_str());


		//Remove the GeoTIFF file If already exists
		remove(tifFile.c_str());

		string progressFile;
		progressFile.clear();
		progressFile.append(ptrScratchFolder);
		progressFile.append("/progress");
		progressFile.append("_");
		progressFile.append(ptrProgressID);
		progressFile.append(".txt");
		printf("progressFile file name: [%s]\n", progressFile.c_str());

		string logFile;
		logFile.clear();
		logFile.append(ptrScratchFolder);
		logFile.append("/log");
		logFile.append("_");
		logFile.append(ptrProgressID);
		logFile.append(".log");
		printf("logFile file name: [%s]\n", logFile.c_str());


		string termFile;
		termFile.clear();
		termFile.append(ptrScratchFolder);
		termFile.append("/log");
		termFile.append("_");
		termFile.append(ptrProgressID);
		termFile.append(".ter");

		printf("termFile file name: [%s]\n", termFile.c_str());

	
		int wresult = 0;
		int mresult = 0;
		geopdf_create_status_file_progress((char*)progressFile.c_str(),0.0f);
		geopdf_write_log((char*)logFile.c_str(),"INFO:Entering Warp module");
		/******** Converting GeoPDF to GeoTIFF ********/
		wresult = geopdf_gwarp(9,argv,(char*)progressFile.c_str(),(char*)termFile.c_str(),(char*)logFile.c_str());
		/******** End of Converting GeoPDF to GeoTIFF call ********/
		geopdf_write_log((char*)logFile.c_str(),"INFO:Exiting Warp code");

		if(wresult == 0)
		{
			/******** Step 2: Begins here ********/
			/* Now check if user has requested for Map Creation CANCEL */
			if (GEOMAP_UTILS_TERM_REQUESTED != geopdf_check_process_termination((char*)termFile.c_str()))
			{
				/* Case: User HAS ALLOWED Map Creation */
				string mbtilesName;
				mbtilesName.append(ptrMBTileName);
				remove((char*)mbtilesName.c_str());
				geopdf_write_log((char*)logFile.c_str(),"INFO:Starting MBTiles generation ...");
				/* png - mbtiles format, 2 - Compression level, 80 - jpeg quality */
				mresult = geopdf_convert_mbtiles((char*)tifFile.c_str(),
							(char*)mbtilesName.c_str(),
							"",
							"png",
							"2",
							"80",
							"1",ptrTMP,(char*)progressFile.c_str(),(char*)logFile.c_str(),(char*)termFile.c_str(),ptrutid);
				geopdf_write_log((char*)logFile.c_str(),"INFO:Ending MBTiles generation ...");
				remove(tifFile.c_str());
				if(mresult == 0)
				{
					nResult = GEOPDF_READER_SUCCESS;
					geopdf_write_log((char*)logFile.c_str(),"INFO:MBTiles : tile generation [SUCCESS]");
				}
				else if(mresult == GEOMAP_UTILS_TERM_REQUESTED)
				{
					nResult = GEOMAP_UTILS_TERM_REQUESTED;
					geopdf_write_log((char*)logFile.c_str(),"INFO:MBTiles : tile generation [TERM REQUESTED]");
				}
				else
				{
					nResult = GEOPDF_READER_TILE_GEN_ERROR;
					geopdf_write_log((char*)logFile.c_str(),"INFO:MBTiles : tile generation [FAILED]");
				}
			}
			else
			{
				/* Case: User has request Map Creation Process to CANCEL */
				geopdf_write_log((char*)logFile.c_str(),"INFO:Warp : termination requested");
				geopdf_create_status_file_term((char*)progressFile.c_str(),"termination requested at warp");
				remove(tifFile.c_str());
				remove(termFile.c_str());
				nResult = GEOMAP_UTILS_TERM_REQUESTED;
			}
		}
		else if(GEOMAP_UTILS_TERM_REQUESTED == wresult)
		{
			/* Case: User has request Map Creation Process to CANCEL at Warp process */
			geopdf_write_log((char*)logFile.c_str(),"INFO:Warp : termination requested");
			remove(tifFile.c_str());
			remove(termFile.c_str());
			geopdf_create_status_file_term((char*)progressFile.c_str(),"termination requested at warp");
			nResult = GEOMAP_UTILS_TERM_REQUESTED;
		}
		else
		{
			geopdf_write_log((char*)logFile.c_str(),"warp: failed for reason");
			geopdf_create_status_file_failed((char*)progressFile.c_str(),"warp Failed");
			nResult = GEOMAP_UTILS_WARP_FAILED;
		}
		for(int i=0;i<11;i++) {
			if(argv[i] != NULL)
			{
				free(argv[i]);
			}
		}
		if(argv != NULL)
		{
			free(argv);
		}
	}
	else
	{
		nResult = GEOPDF_READER_WARP_MEM_ALLOC_FAILED;
	}
	}
	return nResult;
}


